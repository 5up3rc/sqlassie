# SQLassie - database firewall
# Copyright (C) 2011 Brandon Skari <brandon.skari@gmail.com>
#
# This file is part of SQLassie.
#
# SQLassie is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# SQLassie is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with SQLassie. If not, see <http://www.gnu.org/licenses/>.

BINARY_DIR = ../bin
BINARIES = $(BINARY_DIR)/logger \
	$(BINARY_DIR)/tunnel \
	$(BINARY_DIR)/scanner \
	$(BINARY_DIR)/parser \
	$(BINARY_DIR)/riskAnalyzer \
	$(BINARY_DIR)/queryStatistics \
	$(BINARY_DIR)/probabilities \
	$(BINARY_DIR)/sqlassie \
	$(BINARY_DIR)/test \
	$(BINARY_DIR)/demo \
	$(BINARY_DIR)/fuzzer

LEX = flex
YACC = yacc
LEMON = lemon

ifeq "$(VERSION)" "PROFILE"
CXXFLAGS = $(PROFILE_CXXFLAGS) $(WARNING_CXXFLAGS) $(CUSTOM_CXXFLAGS)
CXXFLAGS_NO_WARNINGS = $(PROFILE_CXXFLAGS)
else
ifeq "$(VERSION)" "DEBUG"
CXXFLAGS = $(DEBUG_CXXFLAGS) $(WARNING_CXXFLAGS) $(CUSTOM_CXXFLAGS)
CXXFLAGS_NO_WARNINGS = $(DEBUG_CXXFLAGS)
else
ifeq "$(VERSION)" "RELEASE"
CXXFLAGS = $(RELEASE_CXXFLAGS) $(WARNING_CXXFLAGS) $(CUSTOM_CXXFLAGS)
CXXFLAGS_NO_WARNINGS = $(RELEASE_CXXFLAGS)
OPTIONAL_STRIP = strip
endif
endif
endif

# Clang refuses to compile to object code if you include headers, e.g.
# clang++ main.o Class.o Clas.hpp -o main
# will generate an error (g++ implicityly ignores them). I still want headers
# listed as dependencies, so just use this function to filter them out.
noHeaders = $(filter-out %.h,$(filter-out %.hpp,$(1)))

# Specific Targets

all: $(BINARIES) $(OPTIONAL_STRIP)

demoDependencies = demo.o sqlParser.o scanner.yy.o QueryRisk.o AstNode.o \
	ComparisonNode.o ExpressionNode.o InValuesListNode.o AlwaysSomethingNode.o \
	ParserInterface.o AttackProbabilities.o sqlParser.h DlibProbabilities.o \
	huginScanner.yy.o huginParser.tab.o MySqlConstants.o Logger.o \
	NegationNode.o ScannerContext.o SensitiveNameChecker.o \
	initializeSingletons.o MySqlGuardObjectContainer.o BinaryOperatorNode.o \
	TokenInfo.o BooleanLogicNode.o TerminalNode.o NullNode.o FunctionNode.o
$(BINARY_DIR)/demo: $(demoDependencies)
	$(CXX) $(CXXFLAGS) $(call noHeaders,$(demoDependencies)) \
		-lboost_regex -lboost_thread -lpthread -o $(BINARY_DIR)/demo

fuzzerDependencies = tests/fuzzer.o ParserInterface.o QueryRisk.o \
	scanner.yy.o ScannerContext.o sqlParser.h sqlParser.o ExpressionNode.o \
	AstNode.o NegationNode.o InValuesListNode.o BinaryOperatorNode.o \
	ComparisonNode.o AlwaysSomethingNode.o NullNode.o TerminalNode.o \
	FunctionNode.o BooleanLogicNode.o Logger.o MySqlConstants.o TokenInfo.o \
	SensitiveNameChecker.o
$(BINARY_DIR)/fuzzer: $(fuzzerDependencies)
	$(CXX) $(CXXFLAGS_NO_WARNINGS) $(call noHeaders,$(fuzzerDependencies)) \
		-lboost_regex -lboost_program_options -o $(BINARY_DIR)/fuzzer

loggerDependencies = logger.o Socket.o Proxy.o ProxyHalf.o ListenSocket.o \
	MySqlLogger.o MySqlLoggerListenSocket.o MessageHandler.o Logger.o
$(BINARY_DIR)/logger: $(loggerDependencies)
	$(CXX) $(CXXFLAGS) $(call noHeaders,$(loggerDependencies)) \
		-lboost_thread -o $(BINARY_DIR)/logger

parserDependencies = parser.o sqlParser.o scanner.yy.o QueryRisk.o AstNode.o \
	ComparisonNode.o TerminalNode.o NullNode.o FunctionNode.o \
	ExpressionNode.o InValuesListNode.o AlwaysSomethingNode.o \
	ParserInterface.o MySqlConstants.o Logger.o \
	NegationNode.o ScannerContext.o SensitiveNameChecker.o BinaryOperatorNode.o \
	TokenInfo.o BooleanLogicNode.o ReadlineStream.o
$(BINARY_DIR)/parser: $(parserDependencies)
	$(CXX) $(CXXFLAGS_NO_WARNINGS) $(call noHeaders,$(parserDependencies)) \
		-lboost_regex -lboost_thread -lm -lreadline -o $(BINARY_DIR)/parser

probabilitiesDependencies = probabilities.o csvParse.hpp
$(BINARY_DIR)/probabilities: $(probabilitiesDependencies)
	$(CXX) $(CXXFLAGS) probabilities.o -o $(BINARY_DIR)/probabilities

queryStatisticsDependencies = queryStatistics.o sqlParser.o scanner.yy.o \
	AstNode.o ComparisonNode.o ExpressionNode.o InValuesListNode.o \
	AlwaysSomethingNode.o ParserInterface.o MySqlConstants.o Logger.o \
	NegationNode.o ScannerContext.o SensitiveNameChecker.o \
	BinaryOperatorNode.o TokenInfo.o BooleanLogicNode.o QueryRisk.o NullNode.o \
	TerminalNode.o FunctionNode.o
$(BINARY_DIR)/queryStatistics: $(queryStatisticsDependencies)
	$(CXX) $(CXXFLAGS_NO_WARNINGS) $(call noHeaders,$(queryStatisticsDependencies)) \
		-lboost_regex -lboost_thread -lm -o $(BINARY_DIR)/queryStatistics

riskAnalyzerDependencies = riskAnalyzer.o sqlParser.o scanner.yy.o AstNode.o \
	ComparisonNode.o ExpressionNode.o InValuesListNode.o AlwaysSomethingNode.o \
	NegationNode.o ParserInterface.o AttackProbabilities.o sqlParser.h \
	QueryRisk.o DlibProbabilities.o huginScanner.yy.o huginParser.tab.o \
	MySqlConstants.o Logger.o ScannerContext.o TerminalNode.o \
	SensitiveNameChecker.o BinaryOperatorNode.o TokenInfo.o BooleanLogicNode.o \
	NullNode.o FunctionNode.o ReadlineStream.o
$(BINARY_DIR)/riskAnalyzer: $(riskAnalyzerDependencies)
	$(CXX) $(CXXFLAGS) $(call noHeaders,$(riskAnalyzerDependencies)) \
		-lboost_regex -lboost_thread -lreadline -o $(BINARY_DIR)/riskAnalyzer

scannerDependencies = scanner.o scanner.yy.o QueryRisk.o sqlParser.h Logger.o \
	ScannerContext.o ReadlineStream.o
$(BINARY_DIR)/scanner: $(scannerDependencies)
	$(CXX) $(CXXFLAGS_NO_WARNINGS) $(call noHeaders,$(scannerDependencies)) \
		-lboost_regex -lboost_thread -lreadline -o $(BINARY_DIR)/scanner

sqlassieDependencies = sqlassie.o Socket.hpp Socket.o Proxy.hpp Proxy.o \
	ProxyHalf.o ListenSocket.o MySqlGuard.o MySqlGuardListenSocket.o \
	sqlParser.o scanner.yy.o QueryRisk.o AstNode.o ComparisonNode.o \
	ExpressionNode.o InValuesListNode.o AlwaysSomethingNode.o \
	DlibProbabilities.o MySqlGuardObjectContainer.o ParserInterface.o \
	MySqlErrorMessageBlocker.o AttackProbabilities.o MySqlSocket.o \
	MySqlConstants.o MySqlLoginCheck.o huginScanner.yy.o huginParser.tab.o \
	MessageHandler.o Logger.o NegationNode.o QueryWhitelist.o \
	ScannerContext.o SensitiveNameChecker.o initializeSingletons.o \
	BinaryOperatorNode.o TokenInfo.o BooleanLogicNode.o ProxyHalf.hpp \
	TerminalNode.o NullNode.o FunctionNode.o
$(BINARY_DIR)/sqlassie: $(sqlassieDependencies)
	$(CXX) $(CXXFLAGS_NO_WARNINGS) $(call noHeaders,$(sqlassieDependencies)) \
		-lboost_program_options -lboost_regex -lboost_thread -lmysqlclient \
		-lpthread \
		-o $(BINARY_DIR)/sqlassie

testDependencies = tests/test.o tests/testNode.o tests/testParser.o \
	tests/testMySqlConstants.o tests/testQueryWhitelist.o tests/testScanner.o \
	tests/testQueryRisk.o tests/testSqlassie.o \
	Socket.hpp Socket.o Proxy.hpp Proxy.o ProxyHalf.hpp \
	ProxyHalf.o ListenSocket.o MySqlGuard.o MySqlGuardListenSocket.o sqlParser.o \
	scanner.yy.hpp scanner.yy.o QueryRisk.o AstNode.o ComparisonNode.o \
	ExpressionNode.o InValuesListNode.o AlwaysSomethingNode.o \
	DlibProbabilities.o MySqlGuardObjectContainer.o ParserInterface.o \
	MySqlErrorMessageBlocker.o AttackProbabilities.o MySqlSocket.o \
	MySqlConstants.o MySqlLoginCheck.o huginScanner.yy.o huginParser.tab.o \
	MessageHandler.o Logger.o NegationNode.o QueryWhitelist.o \
	ScannerContext.o SensitiveNameChecker.o BinaryOperatorNode.o TokenInfo.o \
	BooleanLogicNode.o TerminalNode.o NullNode.o FunctionNode.o
$(BINARY_DIR)/test: $(testDependencies) $(BINARY_DIR)/sqlassie
	$(CXX) $(CXXFLAGS_NO_WARNINGS) $(call noHeaders,$(testDependencies)) \
		-lboost_regex -lboost_thread -lmysqlclient \
		-lboost_unit_test_framework -lboost_filesystem -lboost_system \
		-lpthread \
		-o $(BINARY_DIR)/test

tunnelDependencies = tunnel.o ProxyListenSocket.hpp \
	Socket.o Proxy.o ProxyHalf.o ListenSocket.o MySqlPrinter.o \
	ProxyListenSocket.o MessageHandler.o Logger.o
$(BINARY_DIR)/tunnel: $(tunnelDependencies)
	$(CXX) $(CXXFLAGS) $(call noHeaders,$(tunnelDependencies)) \
		-lboost_thread -lboost_program_options -o $(BINARY_DIR)/tunnel

sqlParser.h: sqlParser.c ;

sqlParser.c: sqlParser.y
	$(LEMON) -s sqlParser.y

sqlParser.o: sqlParser.c AlwaysSomethingNode.hpp AstNode.hpp \
	ComparisonNode.hpp ExpressionNode.hpp InValuesListNode.hpp QueryRisk.hpp \
	BooleanLogicNode.hpp
	$(CXX) $(CXXFLAGS_NO_WARNINGS) sqlParser.c -c -o sqlParser.o

huginParser.tab.hpp: huginParser.tab.cpp ;

huginParser.tab.cpp: huginParser.y clearStack.hpp
	$(YACC) -o huginParser.tab.cpp --defines=huginParser.tab.hpp \
		-v huginParser.y

huginParser.tab.o: huginParser.tab.cpp
	$(CXX) $(CXXFLAGS_NO_WARNINGS) huginParser.tab.cpp -c -o \
		huginParser.tab.o

scanner.yy.hpp: scanner.yy.cpp ;

scanner.yy.cpp: scanner.l sqlParser.h
	$(LEX) --case-insensitive --outfile=scanner.yy.cpp \
		--header-file=scanner.yy.hpp scanner.l

scanner.yy.o: scanner.yy.cpp scanner.yy.hpp ScannerContext.hpp
	$(CXX) $(CXXFLAGS_NO_WARNINGS) scanner.yy.cpp -c -o scanner.yy.o

huginScanner.yy.cpp huginScanner.yy.hpp: huginScanner.l huginParser.tab.hpp
	$(LEX) --case-insensitive --outfile=huginScanner.yy.cpp \
		--header-file=huginScanner.yy.hpp huginScanner.l

huginScanner.yy.o: huginScanner.yy.cpp huginScanner.yy.hpp
	$(CXX) $(CXXFLAGS_NO_WARNINGS) huginScanner.yy.cpp -c \
		-o huginScanner.yy.o

ParserInterface.hpp: sqlParser.h scanner.yy.hpp

strip: $(BINARIES)
	strip $(BINARIES)

.PHONY: doxygen
doxygen: Doxyfile
	rm -rf doxygen
	doxygen Doxyfile

.PHONY: dependencies
dependencies: dependencies.py
	# These files mess up the dependencies
	rm -f sqlParser.h sqlParser.c sqlParser.o
	rm -f scanner.yy.hpp scanner.yy.cpp scanner.yy.o
	rm -f huginParser.tab.hpp huginParser.tab.cpp huginParser.tab.o
	rm -f huginScanner.yy.hpp huginScanner.yy.cpp huginScanner.yy.o
	./dependencies.py *cpp tests/*cpp > Makefile.dependencies

.PHONY: clean
clean:
	rm -f *.o *.gch *~
	rm -f tests/*.o tests/*~
	rm -f scanner.yy.cpp scanner.yy.hpp \
	sqlParser.out sqlParser.c sqlParser.h \
	huginScanner.yy.cpp huginScanner.yy.hpp \
	huginParser.output huginParser.tab.cpp huginParser.tab.hpp
	rm -rf queries/formatQueries queries/formatMySqlLog
	rm -f $(BINARIES)
	rm -rf doxygen

# The following dependencies generated by a Python script
include Makefile.dependencies
